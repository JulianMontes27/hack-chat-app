// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url   = env("DATABASE_URL")
}

model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String?
  imgUrl String 
  email String @unique

  servers Server[]

  member Member[]

  channel Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
} 

model Server {
  id String @id @default(uuid())
  name String
  imgUrl String
  inviteCode String @unique

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]

  channels Channel[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("servers")
}

//a member of a server can be either of these options:
enum MemberRole {
  ADMIN
  GUEST
  MOD
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

//member of a Server
model Member{
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  chatsInitiated Chat[] @relation("MemberOne") //#member-one for this member
  chatsReceived Chat[] @relation("MemberTwo") //#member-two times this member was invited to chat(not-initiated)

  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("members")
}

model Channel{
  id String @id @default(uuid())
  type ChannelType @default(TEXT)
  name String

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade) //if server is deleted, then delete all channels within

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("channels")
}

//MESSAGE for channels
model Message{
  id String @id @default(uuid())
  content String @db.Text //long messages

  fileUrl String? @db.Text

  memberId String //member sends the Message
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false) //SOFT DELETE method (message is not cleared from the DB)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

//Chat between two Members
model Chat{
  id String @id @default(uuid())

  memberOneId String
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId,memberTwoId]) //each Chat must be unique. There cant be two or more copies of the same Chat (same members)

  @@map("chats")
}

//for Chat instances
model DirectMessage{
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  chatId String
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  @@map("direct_messages")
}