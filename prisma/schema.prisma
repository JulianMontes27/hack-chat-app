// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url   = env("DATABASE_URL")
}

model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String?
  imgUrl String 
  email String @unique

  servers Server[]

  member Member[]

  channel Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
} 

model Server {
  id String @id @default(uuid())
  name String
  imgUrl String
  inviteCode String @unique

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]

  channels Channel[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("servers")
}

//a member of a server can be either of these options:
enum MemberRole {
  ADMIN
  GUEST
  MOD
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

//member of a Server
model Member{
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("members")
}

model Channel{
  id String @id @default(uuid())
  type ChannelType @default(TEXT)
  name String

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade) //if server is deleted, then delete all channels within

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("channels")
}

